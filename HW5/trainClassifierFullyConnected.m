function net = trainClassifierFullyConnected(trainingData)
%TRAINCLASSIFIERFULLYCONECTED Summary of this function goes here
%   Detailed explanation goes here

J = 100; % hidden layer size 

% Declaration: the code in this loop is modified on autogenerated one
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 19-Apr-2018 17:34:50
%
% This script assumes these variables are defined:
%
%   trainX - input data.
%   trainY - target data.

x = trainingData(:, 2:end)';
t = zeros(2, size(x, 2));
t(1, :) = double(trainingData(:, 1)' == -1);
t(2, :) = double(trainingData(:, 1)' == 1);

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = J;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y);
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
%view(net);

% Plots
% Uncomment these lines to enable various plots.
h = figure('units','normalized','outerposition',[0 0 1 1]);
plotperform(tr)
saveas(h, sprintf('FCNN_Performance_%d', J), 'png');
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
h = figure('units','normalized','outerposition',[0 0 1 1]);
plotconfusion(t,y);
saveas(h, sprintf('FCNN_Confusion_%d', J), 'png');
h = figure('units','normalized','outerposition',[0 0 1 1]);
plotroc(t,y)
saveas(h, sprintf('FCNN_ROC_%d', J), 'png');

end

