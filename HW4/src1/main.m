% main.m

rng(2018);

dat = load('../MNIST.mat');

h = figure();
for i = 1:10
    j = datasample(find(dat.trainY(:, i) == 1), 1);
    subplot(1, 10, i);
    imshow(uint8(squeeze(dat.trainX(j, :, :))));
end
saveas(h, 'glance', 'png');

% preprocessing
trainX = reshape(dat.trainX, [size(dat.trainX, 1), 784]) / 255;
testX = reshape(dat.testX, [size(dat.testX, 1), 784]) / 255;
trainY = dat.trainY;
testY = dat.testY;

for J = [5, 10, 20, 40, 100]

    % Declaration: the code in this loop is modified on autogenerated one
    % Solve a Pattern Recognition Problem with a Neural Network
    % Script generated by Neural Pattern Recognition app
    % Created 19-Apr-2018 17:34:50
    %
    % This script assumes these variables are defined:
    %
    %   trainX - input data.
    %   trainY - target data.

    x = trainX';
    t = trainY';

    % Choose a Training Function
    % For a list of all training functions type: help nntrain
    % 'trainlm' is usually fastest.
    % 'trainbr' takes longer but may be better for challenging problems.
    % 'trainscg' uses less memory. Suitable in low memory situations.
    trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

    % Create a Pattern Recognition Network
    hiddenLayerSize = J;
    net = patternnet(hiddenLayerSize, trainFcn);

    % Setup Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 70/100;
    net.divideParam.valRatio = 15/100;
    net.divideParam.testRatio = 15/100;

    % Train the Network
    [net,tr] = train(net,x,t);

    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    performance = perform(net,t,y);
    tind = vec2ind(t);
    yind = vec2ind(y);
    percentErrors = sum(tind ~= yind)/numel(tind);

    % View the Network
    %view(net);

    % Plots
    % Uncomment these lines to enable various plots.
    h = figure('units','normalized','outerposition',[0 0 1 1]);
    plotperform(tr)
    saveas(h, sprintf('Performance_%d', J), 'png');
    %figure, plottrainstate(tr)
    %figure, ploterrhist(e)
    h = figure('units','normalized','outerposition',[0 0 1 1]);
    plotconfusion(t,y);
    saveas(h, sprintf('Confusion_%d', J), 'png');
    h = figure('units','normalized','outerposition',[0 0 1 1]);
    plotroc(t,y)
    saveas(h, sprintf('ROC_%d', J), 'png');

end

% for J = 100
[C, CM, IND, PER] = confusion(t, y);
[a, b] = max(CM .* (1 - eye(size(CM))));
[a, c] = max(a);
% max confusion at c-th row and b(c)-th column, or
% target value c, output value b(c)
s = sprintf('Target value %d, output value %d', ...
    c - 1, b(c) - 1);
disp(s);

indices1 = find(tind == c & yind == b(c));
indices2 = find(tind == b(c) & yind == c);
n = min(min(3, length(indices1)), length(indices2));
s1 = datasample(indices1, n);
s2 = datasample(indices2, n);
h = figure();
for i = 1 : n
    subplot(2, n, i);
    imshow(uint8(squeeze(dat.trainX(s1(i), :, :))));
    subplot(2, n, i + n);
    imshow(uint8(squeeze(dat.trainX(s2(i), :, :))));
end
suptitle(s);
saveas(h, 'max_confusion', 'png');

close all;